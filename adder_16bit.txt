module adder(X,Y,Z,sign,carry,zero,overflow,parity);  // We are using signed numbers
  input [15:0] X,Y;
  output [15:0]Z;
  output sign,carry,zero,overflow,parity;
  
  assign {carry,Z} = X + Y; //16-bit addition
  assign sign = Z[15];
  assign zero = ~|Z;	// takes OR of all bits of Z and then negates the result
  assign parity = ~^Z;	// 1 for even parity
  assign overflow = (X[15] & Y[15] & ~Z[15]) || (~X[15] & ~Y[15] & Z[15]);
endmodule


module test;
  reg [15:0] x,y;
  wire [15:0]z;
  wire sign, carry, zero, overflow, parity;
  
  adder A(x,y,z,sign,carry,zero,overflow,parity);
  initial
    begin
      $dumpfile("adder.vcd");
      $dumpvars(0,test);
      #5 x = 16'h0fff;
      	 y = 16'hf000;
      #5 y = 16'h8765;
      #5 $finish;
    end
endmodule

