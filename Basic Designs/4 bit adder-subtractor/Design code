module half_adder(a,b,s,c);
  input a,b;
  output s,c;
  xor a1(s,a,b);
  and a2(c,a,b);
endmodule

module full_adder(a,b,cin,s,cout);
  input a,b,cin;
  output s,cout;
  wire w1,w2,w3;
  half_adder H1(a,b,w1,w2);
  half_adder H2(cin,w1,s,w3);
  or H3(cout,w3,w2);
endmodule

module add_sub_4_bit(a,b,m,s,cout,v);
  input [3:0] a,b;
  input m; // m = 1 corresponds to subtraction
  output [3:0]s; 
  output cout,v; // v = 1 corresponds to overflow
  wire [3:0]t;
  wire w1,w2,w3;
  
  xor X1(t[0],m,b[0]);
  full_adder F1(a[0],t[0],m,s[0],w1);
  xor X2(t[1],m,b[1]);
  full_adder F2(a[1],t[1],w1,s[1],w2);
  xor X3(t[2],m,b[2]);
  full_adder F3(a[2],t[2],w2,s[2],w3);
  xor X1(t[3],m,b[3]);
  full_adder F4(a[3],t[3],w3,s[3],cout);
  xor(v,cout,w3); // We use this formula for overflow because a and 					b are treated as signed numbers
endmodule
