// A simple 4-function ALU

module ALU_1(a,b,f,op);
  input [7:0] a,b;
  input [1:0] op;
  output reg [7:0] f;
  
  parameter ADD = 2'b00, SUB = 2'b01, MUL = 2'b10, DIV = 2'b11;
  
  always @(*)
    begin
      case(op)
        ADD : f = a + b;
        SUB : f = a - b;
        MUL : f = a * b;
        DIV : f = a / b;
      endcase
    end
endmodule



module ALU_2(A,B,operation,EN,alu_out);
  parameter word_size = 8;
  input [word_size - 1 : 0] A,B;
  input [2:0] operation;
  input EN;
  output [word_size-1:0] alu_out;	reg [word_size-1:0] alu_reg;
  
  assign alu_out = (EN == 1) ? alu_reg : 4'bz;
  always @(*)
    begin
      case
        3'b000 : alu_reg = A + B;
        3'b001 : alu_reg = A - B;
        3'b011 : alu_reg = ~A;
        default : alu_reg = 4'b0;
      endcase
    end
endmodule
  
